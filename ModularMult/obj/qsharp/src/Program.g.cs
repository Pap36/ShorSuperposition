//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Multiply\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulo\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":52}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":63},\"Item2\":{\"Line\":1,\"Column\":69}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Multiply\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Multiply\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":89},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ModularMult.Testing.Multiply\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Multiply\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":89},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlled specialization for ModularMult.Testing.Multiply\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Multiply\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":89},\"Item2\":{\"Line\":1,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ModularMult.Testing.Multiply\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Mult\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":16},\"Item2\":{\"Line\":1,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"modulo\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Mult\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":40,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":131,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularMult.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularMult\\\\Program.qs\",\"Position\":{\"Item1\":131,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
#line hidden
namespace ModularMult.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.Body, 13, 41)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.Adjoint, 13, 41)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.Controlled, 13, 41)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.ControlledAdjoint, 13, 41)]
    public partial class Multiply : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public Multiply(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Multiply";
        String ICallable.FullName => "ModularMult.Testing.Multiply";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (aQ,bQ,modulo,result) = __in__;
#line hidden
            {
#line 15 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var multPad = Allocate__.Apply(((aQ.Length + bQ.Length) - modulo.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 16 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var mult = Allocate__.Apply(modulo.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 18 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var extraPadA = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - aQ.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 19 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var extraPadB = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - bQ.Length));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line hidden
                                            {
#line 21 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                var extraPadM = Allocate__.Apply((((2L * Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length))) - mult.Length) - multPad.Length));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line hidden
                                                    {
#line 23 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        var aux = Allocate__.Apply(modulo.Length);
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line hidden
                                                            {
#line 25 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                var padM1 = Allocate__.Apply(QArray<Qubit>.Add(multPad, extraPadM).Length);
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line hidden
                                                                    {
#line 26 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                        var padM2 = Allocate__.Apply(QArray<Qubit>.Add(multPad, extraPadM).Length);
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 29 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, extraPadA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, extraPadB)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM))));
#line 31 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, padM1)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aux, padM2))));
#line 33 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(mult), new Microsoft.Quantum.Arithmetic.LittleEndian(result)));
#line 35 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, padM1)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aux, padM2))));
#line 36 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, extraPadA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, extraPadB)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM))));
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(padM2);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(padM1);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(aux);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(extraPadM);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(extraPadB);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(extraPadA);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(mult);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(multPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (aQ,bQ,modulo,result) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var __qsVar0__multPad__ = Allocate__.Apply(((aQ.Length + bQ.Length) - modulo.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var __qsVar1__mult__ = Allocate__.Apply(modulo.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var __qsVar2__extraPadA__ = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - aQ.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var __qsVar3__extraPadB__ = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - bQ.Length));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                var __qsVar4__extraPadM__ = Allocate__.Apply((((2L * Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length))) - __qsVar1__mult__.Length) - __qsVar0__multPad__.Length));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        var __qsVar5__aux__ = Allocate__.Apply(modulo.Length);
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                var __qsVar6__padM1__ = Allocate__.Apply(QArray<Qubit>.Add(__qsVar0__multPad__, __qsVar4__extraPadM__).Length);
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                        var __qsVar7__padM2__ = Allocate__.Apply(QArray<Qubit>.Add(__qsVar0__multPad__, __qsVar4__extraPadM__).Length);
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, __qsVar2__extraPadA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar3__extraPadB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, __qsVar6__padM1__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar5__aux__, __qsVar7__padM2__))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__mult__), new Microsoft.Quantum.Arithmetic.LittleEndian(result)));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, __qsVar6__padM1__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar5__aux__, __qsVar7__padM2__))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, __qsVar2__extraPadA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar3__extraPadB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__))));
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(__qsVar7__padM2__);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(__qsVar6__padM1__);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(__qsVar5__aux__);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(__qsVar4__extraPadM__);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(__qsVar3__extraPadB__);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__extraPadA__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__mult__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__multPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,modulo,result)) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var multPad = Allocate__.Apply(((aQ.Length + bQ.Length) - modulo.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var mult = Allocate__.Apply(modulo.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var extraPadA = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - aQ.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var extraPadB = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - bQ.Length));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                var extraPadM = Allocate__.Apply((((2L * Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length))) - mult.Length) - multPad.Length));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        var aux = Allocate__.Apply(modulo.Length);
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                var padM1 = Allocate__.Apply(QArray<Qubit>.Add(multPad, extraPadM).Length);
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                        var padM2 = Allocate__.Apply(QArray<Qubit>.Add(multPad, extraPadM).Length);
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, extraPadA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, extraPadB)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, padM1)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aux, padM2)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(mult), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, padM1)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aux, padM2)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, extraPadA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, extraPadB)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(mult, multPad), extraPadM)))));
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(padM2);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(padM1);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(aux);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(extraPadM);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(extraPadB);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(extraPadA);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(mult);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(multPad);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,modulo,result)) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var __qsVar0__multPad__ = Allocate__.Apply(((aQ.Length + bQ.Length) - modulo.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var __qsVar1__mult__ = Allocate__.Apply(modulo.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var __qsVar2__extraPadA__ = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - aQ.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var __qsVar3__extraPadB__ = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - bQ.Length));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                var __qsVar4__extraPadM__ = Allocate__.Apply((((2L * Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length))) - __qsVar1__mult__.Length) - __qsVar0__multPad__.Length));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        var __qsVar5__aux__ = Allocate__.Apply(modulo.Length);
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                var __qsVar6__padM1__ = Allocate__.Apply(QArray<Qubit>.Add(__qsVar0__multPad__, __qsVar4__extraPadM__).Length);
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                    {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                        var __qsVar7__padM2__ = Allocate__.Apply(QArray<Qubit>.Add(__qsVar0__multPad__, __qsVar4__extraPadM__).Length);
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, __qsVar2__extraPadA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar3__extraPadB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, __qsVar6__padM1__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar5__aux__, __qsVar7__padM2__)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__mult__), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(modulo, __qsVar6__padM1__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar5__aux__, __qsVar7__padM2__)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                                            Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, __qsVar2__extraPadA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar3__extraPadB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(QArray<Qubit>.Add(__qsVar1__mult__, __qsVar0__multPad__), __qsVar4__extraPadM__)))));
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(__qsVar7__padM2__);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(__qsVar6__padM1__);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(__qsVar5__aux__);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(__qsVar4__extraPadM__);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(__qsVar3__extraPadB__);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__extraPadA__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__mult__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__multPad__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Microsoft__Quantum__Arithmetic__MultiplyI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__DivideI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.DivideI));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> aQ, IQArray<Qubit> bQ, IQArray<Qubit> modulo, IQArray<Qubit> result)
        {
            return __m__.Run<Multiply, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((aQ, bQ, modulo, result));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.Body, 41, 132)]
    public partial class Mult : Operation<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>, ICallable
    {
        public Mult(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)>, IApplyData
        {
            public In((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Mult";
        String ICallable.FullName => "ModularMult.Testing.Mult";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> Multiply__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64> __Body__ => (__in__) =>
        {
            var (a,b,modulo) = __in__;
#line 44 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var aB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(a);
#line 45 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var bB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(b);
#line 46 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var mB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(modulo);
#line 48 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var asize = 0L;
#line 49 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
            {
#line 50 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                if (aB[index])
                {
#line 51 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    asize = (index + 1L);
                }
            }

#line 55 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var bsize = 0L;
#line 56 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
            {
#line 57 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                if (bB[index])
                {
#line 58 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    bsize = (index + 1L);
                }
            }

#line 62 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var msize = 0L;
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            foreach (var index in new QRange(0L, (mB.Length - 1L)))
#line hidden
            {
#line 64 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                if (mB[index])
                {
#line 65 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                    msize = (index + 1L);
                }
            }

#line 69 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
            var size = Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(asize, bsize, msize));
#line hidden
            {
#line 71 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var aQ = Allocate__.Apply(size);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 72 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var bQ = Allocate__.Apply(size);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 73 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var mQ = Allocate__.Apply(size);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 75 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                                    {
#line 76 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        if (aB[index])
                                        {
#line 77 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                        }
                                    }

#line 81 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
                                    {
#line 82 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        if (bB[index])
                                        {
#line 83 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                        }
                                    }

#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                    foreach (var index in new QRange(0L, (mB.Length - 1L)))
#line hidden
                                    {
#line 88 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        if (mB[index])
                                        {
#line 89 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(mQ[index]);
                                        }
                                    }

#line hidden
                                    {
#line 94 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var result = Allocate__.Apply(size);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 96 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Multiply__.Apply((aQ, bQ, mQ, result));
#line hidden
                                            {
#line 98 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                var finalRes = Allocate__.Apply(size);
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 99 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes)));
#line 101 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    var res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes));
#line 104 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    Multiply__.Adjoint.Apply((aQ, bQ, mQ, result));
#line 106 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                                                    {
#line 107 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        if (aB[index])
                                                        {
#line 108 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                                        }
                                                    }

#line 112 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
                                                    {
#line 113 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        if (bB[index])
                                                        {
#line 114 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                                        }
                                                    }

#line 118 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    foreach (var index in new QRange(0L, (mB.Length - 1L)))
#line hidden
                                                    {
#line 119 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                        if (mB[index])
                                                        {
#line 120 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(mQ[index]);
                                                        }
                                                    }

#line 124 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                                    return res;
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(finalRes);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(result);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(mQ);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Multiply__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(Multiply));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger a, System.Numerics.BigInteger b, System.Numerics.BigInteger modulo)
        {
            return __m__.Run<Mult, (System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>((a, b, modulo));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs", OperationFunctor.Body, 132, -1)]
    public partial class Testing_in_Superposition : Operation<Int64, QVoid>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "ModularMult.Testing.Testing_in_Superposition";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> Multiply__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var numQubits = __in__;
#line hidden
            {
#line 133 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                var a = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 134 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                        var b = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 135 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                var m = Allocate__.Apply(numQubits);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 136 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                        var res = Allocate__.Apply(numQubits);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 139 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, a));
#line 140 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, b));
#line 141 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, m));
#line 143 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Multiply__.Apply((a, b, m, res));
#line 144 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularMult\\Program.qs"
                                            Multiply__.Adjoint.Apply((a, b, m, res));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(res);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(m);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(b);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(a);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Multiply__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(Multiply));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numQubits)
        {
            return __m__.Run<Testing_in_Superposition, Int64, QVoid>(numQubits);
        }
    }
}