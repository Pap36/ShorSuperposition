//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"modularSquare\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":37}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"modularSquare\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"ModularSquare\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":25},\"Item2\":{\"Line\":1,\"Column\":27}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":39},\"Item2\":{\"Line\":1,\"Column\":41}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":59}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"ModularSquare\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"ModularSquare\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":81},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ModularSquare.Testing.ModularSquare\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"ModularSquare\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":81},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsControlled specialization for ModularSquare.Testing.ModularSquare\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"ModularSquare\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":81},\"Item2\":{\"Line\":1,\"Column\":90}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ModularSquare.Testing.ModularSquare\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":104,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ModularSquare.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ModularSquare\\\\Program.qs\",\"Position\":{\"Item1\":104,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
#line hidden
namespace ModularSquare.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.Body, 14, 79)]
    public partial class modularSquare : Operation<(System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>, ICallable
    {
        public modularSquare(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,System.Numerics.BigInteger)>, IApplyData
        {
            public In((System.Numerics.BigInteger,System.Numerics.BigInteger) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "modularSquare";
        String ICallable.FullName => "ModularSquare.Testing.modularSquare";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> ModularSquare__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,System.Numerics.BigInteger), Int64> __Body__ => (__in__) =>
        {
            var (a,b) = __in__;
#line 17 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            var aB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(a);
#line 18 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            var bB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(b);
#line 20 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            var asize = 0L;
#line 21 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
            {
#line 22 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                if (aB[index])
                {
#line 23 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    asize = (index + 1L);
                }
            }

#line 27 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            var bsize = 0L;
#line 28 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
            {
#line 29 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                if (bB[index])
                {
#line 30 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    bsize = (index + 1L);
                }
            }

#line 34 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            var size = Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(asize, bsize));
#line hidden
            {
#line 36 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var aQ = Allocate__.Apply(size);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 37 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                        var bQ = Allocate__.Apply(size);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 38 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                            foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                            {
#line 39 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                if (aB[index])
                                {
#line 40 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                }
                            }

#line 44 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
                            {
#line 45 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                if (bB[index])
                                {
#line 46 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                }
                            }

#line hidden
                            {
#line 51 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                var result = Allocate__.Apply(size);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 52 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    ModularSquare__.Apply((aQ, bQ, result));
#line hidden
                                    {
#line 54 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                        var finalResQ = Allocate__.Apply(size);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 55 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(finalResQ)));
#line 57 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            var finalRes = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(finalResQ));
#line 59 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            ModularSquare__.Adjoint.Apply((aQ, bQ, result));
#line 61 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                                            {
#line 62 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                                if (aB[index])
                                                {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                                }
                                            }

#line 67 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
                                            {
#line 68 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                                if (bB[index])
                                                {
#line 69 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                                }
                                            }

#line 73 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            return finalRes;
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(finalResQ);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(result);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.ModularSquare__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(ModularSquare));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,System.Numerics.BigInteger) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger a, System.Numerics.BigInteger b)
        {
            return __m__.Run<modularSquare, (System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>((a, b));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.Body, 79, 105)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.Adjoint, 79, 105)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.Controlled, 79, 105)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.ControlledAdjoint, 79, 105)]
    public partial class ModularSquare : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public ModularSquare(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ModularSquare";
        String ICallable.FullName => "ModularSquare.Testing.ModularSquare";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__SquareI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (aQ,bQ,result) = __in__;
#line hidden
            {
#line 81 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var div = Allocate__.Apply((2L * aQ.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 83 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                        var padB = Allocate__.Apply((div.Length - bQ.Length));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 84 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                var padA = Allocate__.Apply((div.Length - result.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 86 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__SquareI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, padA))));
#line 88 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB)), new Microsoft.Quantum.Arithmetic.LittleEndian(div)));
#line hidden
                                    {
#line 91 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                        var placeHolder = Allocate__.Apply(result.Length);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 92 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(placeHolder)));
#line 94 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(placeHolder, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB)), new Microsoft.Quantum.Arithmetic.LittleEndian(div)));
#line 95 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(placeHolder, padA))));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(placeHolder);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(padA);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(padB);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(div);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (aQ,bQ,result) = __in__;
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var __qsVar0__div__ = Allocate__.Apply((2L * aQ.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                        var __qsVar1__padB__ = Allocate__.Apply((__qsVar0__div__.Length - bQ.Length));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                var __qsVar2__padA__ = Allocate__.Apply((__qsVar0__div__.Length - result.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                        var __qsVar3__placeHolder__ = Allocate__.Apply(result.Length);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar3__placeHolder__, __qsVar2__padA__))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar3__placeHolder__, __qsVar2__padA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar1__padB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__div__)));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__placeHolder__)));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(__qsVar3__placeHolder__);
                                            }
                                        }
                                    }

#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, __qsVar2__padA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar1__padB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__div__)));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, __qsVar2__padA__))));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__padA__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__padB__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__div__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,result)) = __in__;
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var div = Allocate__.Apply((2L * aQ.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                        var padB = Allocate__.Apply((div.Length - bQ.Length));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                var padA = Allocate__.Apply((div.Length - result.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__SquareI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, padA)))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB)), new Microsoft.Quantum.Arithmetic.LittleEndian(div))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                        var placeHolder = Allocate__.Apply(result.Length);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(placeHolder))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(placeHolder, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB)), new Microsoft.Quantum.Arithmetic.LittleEndian(div))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(placeHolder, padA)))));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(placeHolder);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(padA);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(padB);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(div);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,result)) = __in__;
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var __qsVar0__div__ = Allocate__.Apply((2L * aQ.Length));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                        var __qsVar1__padB__ = Allocate__.Apply((__qsVar0__div__.Length - bQ.Length));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                            {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                var __qsVar2__padA__ = Allocate__.Apply((__qsVar0__div__.Length - result.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                        var __qsVar3__placeHolder__ = Allocate__.Apply(result.Length);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar3__placeHolder__, __qsVar2__padA__)))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(__qsVar3__placeHolder__, __qsVar2__padA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar1__padB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__div__))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(result), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar3__placeHolder__))));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(__qsVar3__placeHolder__);
                                            }
                                        }
                                    }

#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, __qsVar2__padA__)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, __qsVar1__padB__)), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__div__))));
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__SquareI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(result, __qsVar2__padA__)))));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__padA__);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__padB__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__div__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arithmetic__SquareI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.SquareI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__DivideI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.DivideI));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> aQ, IQArray<Qubit> bQ, IQArray<Qubit> result)
        {
            return __m__.Run<ModularSquare, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>), QVoid>((aQ, bQ, result));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs", OperationFunctor.Body, 105, -1)]
    public partial class Testing_in_Superposition : Operation<Int64, QVoid>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "ModularSquare.Testing.Testing_in_Superposition";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)> ModularSquare__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var numQubits = __in__;
#line hidden
            {
#line 107 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                var (a,m,t) = (Allocate__.Apply(numQubits), Allocate__.Apply(numQubits), Allocate__.Apply(numQubits));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 109 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, a));
#line 110 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, m));
#line 112 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    ModularSquare__.Apply((a, m, t));
#line 113 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ModularSquare\\Program.qs"
                    ModularSquare__.Adjoint.Apply((a, m, t));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(a);
#line hidden
                        Release__.Apply(m);
#line hidden
                        Release__.Apply(t);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.ModularSquare__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>)>>(typeof(ModularSquare));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numQubits)
        {
            return __m__.Run<Testing_in_Superposition, Int64, QVoid>(numQubits);
        }
    }
}