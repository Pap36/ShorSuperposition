//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"storeR\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"rQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":29}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"storeR\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"storeR\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GenerateX.Testing.storeR\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"storeR\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsControlled specialization for GenerateX.Testing.storeR\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"storeR\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for GenerateX.Testing.storeR\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"GenerateXVal\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":49}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"GenerateXVal\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"generateX\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"r\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":56},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"generateX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"generateX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsAdjoint specialization for GenerateX.Testing.generateX\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"generateX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlled specialization for GenerateX.Testing.generateX\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"generateX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":62,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":77},\"Item2\":{\"Line\":1,\"Column\":86}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for GenerateX.Testing.generateX\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":98,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"Ran\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":55}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":66}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"GenerateX.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\GenerateX\\\\Program.qs\",\"Position\":{\"Item1\":98,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
#line hidden
namespace GenerateX.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Body, 14, 25)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Adjoint, 14, 25)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Controlled, 14, 25)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.ControlledAdjoint, 14, 25)]
    public partial class storeR : Unitary<(Int64,IQArray<Qubit>,Int64)>, ICallable
    {
        public storeR(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "storeR";
        String ICallable.FullName => "GenerateX.Testing.storeR";
        protected ICallable<(Int64,Int64), IQArray<Boolean>> Microsoft__Quantum__Convert__IntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (r,rQ,size) = __in__;
#line 15 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var rB = (IQArray<Boolean>)Microsoft__Quantum__Convert__IntAsBoolArray.Apply((r, size));
#line 16 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            foreach (var index in new QRange(0L, (rB.Length - 1L)))
#line hidden
            {
#line 17 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                if (rB[index])
                {
#line 18 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(rQ[index]);
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,IQArray<Qubit>,Int64), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (r,rQ,size) = __in__;
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var __qsVar0__rB__ = (IQArray<Boolean>)Microsoft__Quantum__Convert__IntAsBoolArray.Apply((r, size));
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (__qsVar0__rB__.Length - 1L))))
#line hidden
            {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                if (__qsVar0__rB__[__qsVar1__index__])
                {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(rQ[__qsVar1__index__]);
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Int64)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(r,rQ,size)) = __in__;
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var rB = (IQArray<Boolean>)Microsoft__Quantum__Convert__IntAsBoolArray.Apply((r, size));
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            foreach (var index in new QRange(0L, (rB.Length - 1L)))
#line hidden
            {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                if (rB[index])
                {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, rQ[index]));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Int64)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(r,rQ,size)) = __in__;
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var __qsVar0__rB__ = (IQArray<Boolean>)Microsoft__Quantum__Convert__IntAsBoolArray.Apply((r, size));
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (__qsVar0__rB__.Length - 1L))))
#line hidden
            {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                if (__qsVar0__rB__[__qsVar1__index__])
                {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, rQ[__qsVar1__index__]));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__IntAsBoolArray = this.__Factory__.Get<ICallable<(Int64,Int64), IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.IntAsBoolArray));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 r, IQArray<Qubit> rQ, Int64 size)
        {
            return __m__.Run<storeR, (Int64,IQArray<Qubit>,Int64), QVoid>((r, rQ, size));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Body, 25, 63)]
    public partial class GenerateXVal : Operation<(System.Numerics.BigInteger,Int64,Int64), Int64>, ICallable
    {
        public GenerateXVal(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,Int64,Int64)>, IApplyData
        {
            public In((System.Numerics.BigInteger,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "GenerateXVal";
        String ICallable.FullName => "GenerateX.Testing.GenerateXVal";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)> generateX__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (N,r,size) = __in__;
#line 27 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var NB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(N);
#line 28 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            var Nsize = 0L;
#line 29 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            foreach (var index in new QRange(0L, (NB.Length - 1L)))
#line hidden
            {
#line 30 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                if (NB[index])
                {
#line 31 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    Nsize = (index + 1L);
                }
            }

#line hidden
            {
#line 36 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var NQ = Allocate__.Apply(Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(Nsize, size)));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 37 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    foreach (var index in new QRange(0L, Nsize))
#line hidden
                    {
#line 38 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        if (NB[index])
                        {
#line 39 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(NQ[index]);
                        }
                    }

#line hidden
                    {
#line 43 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var x = Allocate__.Apply(NQ.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 44 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            generateX__.Apply((NQ, r, x, size));
#line hidden
                            {
#line 47 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                var finalRes = Allocate__.Apply(NQ.Length);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 48 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(x), new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes)));
#line 49 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                    var res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes));
#line 51 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                    generateX__.Adjoint.Apply((NQ, r, x, size));
#line 52 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                    foreach (var index in new QRange(0L, Nsize))
#line hidden
                                    {
#line 53 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                        if (NB[index])
                                        {
#line 54 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(NQ[index]);
                                        }
                                    }

#line 58 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                                    return res;
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(finalRes);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(x);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(NQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.generateX__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)>>(typeof(generateX));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger N, Int64 r, Int64 size)
        {
            return __m__.Run<GenerateXVal, (System.Numerics.BigInteger,Int64,Int64), Int64>((N, r, size));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Body, 63, 99)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Adjoint, 63, 99)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Controlled, 63, 99)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.ControlledAdjoint, 63, 99)]
    public partial class generateX : Unitary<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)>, ICallable
    {
        public generateX(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,Int64,IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "generateX";
        String ICallable.FullName => "GenerateX.Testing.generateX";
        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__IncrementByInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Int64,IQArray<Qubit>,Int64)> storeR__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__DivideI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (N,r,x,size) = __in__;
#line 70 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N)));
#line hidden
            {
#line 76 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var rQ = Allocate__.Apply(N.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 77 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    storeR__.Apply((r, rQ, size));
#line hidden
                    {
#line 79 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var res = Allocate__.Apply(N.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 80 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(res)));
#line 81 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(x)));
#line 83 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(x)));
#line 86 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(res)));
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            storeR__.Adjoint.Apply((r, rQ, size));
#line 89 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(res);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(rQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (N,r,x,size) = __in__;
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var __qsVar0__rQ__ = Allocate__.Apply(N.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var __qsVar1__res__ = Allocate__.Apply(N.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            storeR__.Adjoint.Adjoint.Apply((r, __qsVar0__rQ__, size));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__res__)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(x)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(x)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__res__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__res__);
                            }
                        }
                    }

#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    storeR__.Adjoint.Apply((r, __qsVar0__rQ__, size));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__rQ__);
                    }
                }
            }

#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(N,r,x,size)) = __in__;
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var rQ = Allocate__.Apply(N.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    storeR__.Controlled.Apply((__controlQubits__, (r, rQ, size)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var res = Allocate__.Apply(N.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(res))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(x))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(x))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(rQ), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(res))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            storeR__.Adjoint.Controlled.Apply((__controlQubits__, (r, rQ, size)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(res);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(rQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(N,r,x,size)) = __in__;
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var __qsVar0__rQ__ = Allocate__.Apply(N.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var __qsVar1__res__ = Allocate__.Apply(N.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            storeR__.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (r, __qsVar0__rQ__, size)));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__res__))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(x))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(x))));
#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__rQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(N), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__res__))));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__res__);
                            }
                        }
                    }

#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                    storeR__.Adjoint.Controlled.Apply((__controlQubits__, (r, __qsVar0__rQ__, size)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__rQ__);
                    }
                }
            }

#line 63 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
            Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(N))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__IncrementByInteger = this.__Factory__.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.IncrementByInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.storeR__ = this.__Factory__.Get<IUnitary<(Int64,IQArray<Qubit>,Int64)>>(typeof(storeR));
            this.Microsoft__Quantum__Arithmetic__DivideI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.DivideI));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,Int64,IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> N, Int64 r, IQArray<Qubit> x, Int64 size)
        {
            return __m__.Run<generateX, (IQArray<Qubit>,Int64,IQArray<Qubit>,Int64), QVoid>((N, r, x, size));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs", OperationFunctor.Body, 99, -1)]
    public partial class Testing_in_Superposition : Operation<(Int64,Int64,Int64), QVoid>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "GenerateX.Testing.Testing_in_Superposition";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)> generateX__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (Ran,numQubits,size) = __in__;
#line hidden
            {
#line 100 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                var x = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 101 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                        var n = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 103 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, n));
#line 105 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            generateX__.Apply((n, Ran, x, size));
#line 106 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\GenerateX\\Program.qs"
                            generateX__.Adjoint.Apply((n, Ran, x, size));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(n);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(x);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.generateX__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Int64,IQArray<Qubit>,Int64)>>(typeof(generateX));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 Ran, Int64 numQubits, Int64 size)
        {
            return __m__.Run<Testing_in_Superposition, (Int64,Int64,Int64), QVoid>((Ran, numQubits, size));
        }
    }
}