//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"testCFQubitCount\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"registerSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"testCFQubitCount\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"testCF\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"c\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":41}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"testCF\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"CF\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":13}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"kQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":14},\"Item2\":{\"Line\":1,\"Column\":16}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"mQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":29}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":42}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":53},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"reversing\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":70},\"Item2\":{\"Line\":1,\"Column\":79}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"CF\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":13}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"andGate\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":188,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubit1\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubit2\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":40}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"qubit3\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":55}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"andGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":188,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"andGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":188,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":82}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFraction.Testing.andGate\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"andGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":188,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":82}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFraction.Testing.andGate\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"andGate\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":188,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":73},\"Item2\":{\"Line\":1,\"Column\":82}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFraction.Testing.andGate\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"ApplyToEachX\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":193,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"ApplyToEachX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":193,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"ApplyToEachX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":193,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":60}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFraction.Testing.ApplyToEachX\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"ApplyToEachX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":193,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":60}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFraction.Testing.ApplyToEachX\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"ApplyToEachX\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":193,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":51},\"Item2\":{\"Line\":1,\"Column\":60}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFraction.Testing.ApplyToEachX\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"pebbleCFStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":199,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currApproxDenom1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":74}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currApproxDenom2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":85},\"Item2\":{\"Line\":1,\"Column\":101}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":25},\"Item2\":{\"Line\":2,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":41},\"Item2\":{\"Line\":2,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxDiv\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":35},\"Item2\":{\"Line\":3,\"Column\":44}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxMult\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":55},\"Item2\":{\"Line\":3,\"Column\":65}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newPad\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":76},\"Item2\":{\"Line\":3,\"Column\":82}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nP1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":93},\"Item2\":{\"Line\":3,\"Column\":96}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"convergenceIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"adj\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":32},\"Item2\":{\"Line\":4,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"pebbleCFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":199,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"garbageAddition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":235,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"toAdd\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":32}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"control\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":67}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"reversing\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":76},\"Item2\":{\"Line\":1,\"Column\":85}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"garbageAddition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":235,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"pebbleStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":273,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currentIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"maximumIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":41},\"Item2\":{\"Line\":1,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"targetIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":60},\"Item2\":{\"Line\":1,\"Column\":71}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"indexArr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":78},\"Item2\":{\"Line\":1,\"Column\":86}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":60},\"Item2\":{\"Line\":2,\"Column\":80}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAD1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":91},\"Item2\":{\"Line\":2,\"Column\":112}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAD2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":29},\"Item2\":{\"Line\":3,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAuD\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":61},\"Item2\":{\"Line\":3,\"Column\":82}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAuM\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":93},\"Item2\":{\"Line\":3,\"Column\":114}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesP\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":29},\"Item2\":{\"Line\":4,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNPad1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":59},\"Item2\":{\"Line\":4,\"Column\":82}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNPad2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":93},\"Item2\":{\"Line\":4,\"Column\":116}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesP1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":29},\"Item2\":{\"Line\":5,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":29},\"Item2\":{\"Line\":6,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":45},\"Item2\":{\"Line\":6,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":61},\"Item2\":{\"Line\":6,\"Column\":76}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":87},\"Item2\":{\"Line\":6,\"Column\":102}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxDiv\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":29},\"Item2\":{\"Line\":7,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxMult\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":49},\"Item2\":{\"Line\":7,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newPad\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":70},\"Item2\":{\"Line\":7,\"Column\":76}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nPad1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":87},\"Item2\":{\"Line\":7,\"Column\":92}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nPad2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":103},\"Item2\":{\"Line\":7,\"Column\":108}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nP1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":119},\"Item2\":{\"Line\":7,\"Column\":122}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":29},\"Item2\":{\"Line\":8,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"control\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":46},\"Item2\":{\"Line\":8,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"areTheSame\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":62},\"Item2\":{\"Line\":8,\"Column\":72}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"fixedBiggestSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":81},\"Item2\":{\"Line\":8,\"Column\":97}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bound\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":104},\"Item2\":{\"Line\":8,\"Column\":109}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"reversing\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":9,\"Column\":29},\"Item2\":{\"Line\":9,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"pebbleStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":273,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"computeValue\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":659,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"arrQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"computeValue\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":659,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"unpebbleStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":674,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"currentIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"maximumIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":55}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"targetIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":73}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"indexArr\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":80},\"Item2\":{\"Line\":1,\"Column\":88}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":29},\"Item2\":{\"Line\":2,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":60},\"Item2\":{\"Line\":2,\"Column\":80}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAD1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":91},\"Item2\":{\"Line\":2,\"Column\":112}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAD2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":29},\"Item2\":{\"Line\":3,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAuD\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":61},\"Item2\":{\"Line\":3,\"Column\":82}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesAuM\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":93},\"Item2\":{\"Line\":3,\"Column\":114}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesP\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":29},\"Item2\":{\"Line\":4,\"Column\":48}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNPad1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":59},\"Item2\":{\"Line\":4,\"Column\":82}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesNPad2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":93},\"Item2\":{\"Line\":4,\"Column\":116}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"intermediateValuesP1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":29},\"Item2\":{\"Line\":5,\"Column\":49}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newNQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":29},\"Item2\":{\"Line\":6,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newDQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":45},\"Item2\":{\"Line\":6,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":61},\"Item2\":{\"Line\":6,\"Column\":76}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newApproxDenom2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":87},\"Item2\":{\"Line\":6,\"Column\":102}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxDiv\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":29},\"Item2\":{\"Line\":7,\"Column\":38}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newAuxMult\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":49},\"Item2\":{\"Line\":7,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"newPad\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":70},\"Item2\":{\"Line\":7,\"Column\":76}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nPad1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":87},\"Item2\":{\"Line\":7,\"Column\":92}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nPad2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":103},\"Item2\":{\"Line\":7,\"Column\":108}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nP1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":7,\"Column\":119},\"Item2\":{\"Line\":7,\"Column\":122}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"result\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":29},\"Item2\":{\"Line\":8,\"Column\":35}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"control\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":46},\"Item2\":{\"Line\":8,\"Column\":53}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"areTheSame\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":62},\"Item2\":{\"Line\":8,\"Column\":72}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"fixedBiggestSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":81},\"Item2\":{\"Line\":8,\"Column\":97}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bound\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":8,\"Column\":104},\"Item2\":{\"Line\":8,\"Column\":109}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"reversing\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":9,\"Column\":29},\"Item2\":{\"Line\":9,\"Column\":38}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"},{\"Case\":\"Qubit\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFraction.Testing\",\"Name\":\"unpebbleStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFraction\\\\Program.qs\",\"Position\":{\"Item1\":674,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
#line hidden
namespace ContinuedFraction.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 13, 29)]
    public partial class testCFQubitCount : Operation<Int64, QVoid>, ICallable
    {
        public testCFQubitCount(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "testCFQubitCount";
        String ICallable.FullName => "ContinuedFraction.Testing.testCFQubitCount";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> CF__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var registerSize = __in__;
#line hidden
            {
#line 14 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var aQ = Allocate__.Apply(((2L * registerSize) + 1L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 15 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        var bQ = Allocate__.Apply(((2L * registerSize) + 1L));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 16 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                var cQ = Allocate__.Apply(registerSize);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 17 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        var resQ = Allocate__.Apply(registerSize);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 19 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, aQ));
#line 20 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, bQ));
#line 21 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, cQ));
#line 23 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            CF__.Apply((aQ, bQ, cQ, resQ, false));
#line 24 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            CF__.Apply((aQ, bQ, cQ, resQ, true));
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(resQ);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(cQ);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.CF__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>>(typeof(CF));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 registerSize)
        {
            return __m__.Run<testCFQubitCount, Int64, QVoid>(registerSize);
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 29, 107)]
    public partial class testCF : Operation<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>, ICallable
    {
        public testCF(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)>, IApplyData
        {
            public In((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "testCF";
        String ICallable.FullName => "ContinuedFraction.Testing.testCF";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> CF__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64> __Body__ => (__in__) =>
        {
            var (a,b,c) = __in__;
#line 31 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var aB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(a);
#line 32 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var bB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(b);
#line 33 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var cB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(c);
#line 35 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var size = 0L;
#line 36 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
            {
#line 37 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if (bB[index])
                {
#line 38 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    size = (index + 1L);
                }
            }

#line hidden
            {
#line 42 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var aQ = Allocate__.Apply(size);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 43 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                    {
#line 44 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        if (aB[index])
                        {
#line 45 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                        }
                    }

#line hidden
                    {
#line 50 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        var bQ = Allocate__.Apply(size);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 51 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                            foreach (var index in new QRange(0L, (size - 1L)))
#line hidden
                            {
#line 52 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                if (bB[index])
                                {
#line 53 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                }
                            }

#line hidden
                            {
#line 57 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                var cQ = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 58 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, (cB.Length - 1L)))
#line hidden
                                    {
#line 59 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        if (cB[index])
                                        {
#line 60 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(cQ[index]);
                                        }
                                    }

#line hidden
                                    {
#line 64 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        var resQ = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 69 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            CF__.Apply((aQ, bQ, cQ, resQ, false));
#line hidden
                                            {
#line 74 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                var finalRes = Allocate__.Apply(resQ.Length);
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 75 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(resQ), new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes)));
#line 77 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    var result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(finalRes));
#line 78 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    CF__.Apply((aQ, bQ, cQ, resQ, true));
#line 84 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                                                    {
#line 85 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                        if (aB[index])
                                                        {
#line 86 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                                        }
                                                    }

#line 90 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    foreach (var index in new QRange(0L, (size - 1L)))
#line hidden
                                                    {
#line 91 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                        if (bB[index])
                                                        {
#line 92 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                                        }
                                                    }

#line 96 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    foreach (var index in new QRange(0L, (cB.Length - 1L)))
#line hidden
                                                    {
#line 97 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                        if (cB[index])
                                                        {
#line 98 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                            Microsoft__Quantum__Intrinsic__X.Apply(cQ[index]);
                                                        }
                                                    }

#line 104 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    return result;
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(finalRes);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(resQ);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(cQ);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.CF__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>>(typeof(CF));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger a, System.Numerics.BigInteger b, System.Numerics.BigInteger c)
        {
            return __m__.Run<testCF, (System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger), Int64>((a, b, c));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 107, 189)]
    public partial class CF : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>, ICallable
    {
        public CF(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CF";
        String ICallable.FullName => "ContinuedFraction.Testing.CF";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Log
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> pebbleStep__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid> __Body__ => (__in__) =>
        {
            var (kQ,mQ,nQ,result,reversing) = __in__;
#line 110 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var target = Microsoft__Quantum__Math__Ceiling.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(result.Length) * 1.44D));
#line 111 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var value = Microsoft__Quantum__Math__Ceiling.Apply(((Microsoft__Quantum__Math__Log.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(target)) / Microsoft__Quantum__Math__Log.Apply(2D)) + 2D));
#line 114 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var fixedBiggestSize = result.Length;
#line hidden
            {
#line 116 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var intermediateValuesNQ = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 117 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        var intermediateValuesDQ = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 119 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                var intermediateValuesNPad1 = Allocate__.Apply(((fixedBiggestSize + 1L) * (value - 1L)));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 120 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        var intermediateValuesNPad2 = Allocate__.Apply(((fixedBiggestSize + 1L) * (value - 1L)));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line hidden
                                            {
#line 122 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                var intermediateValuesAD1 = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line hidden
                                                    {
#line 123 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                        var intermediateValuesAD2 = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line hidden
                                                            {
#line 124 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                var intermediateValuesAuD = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line hidden
                                                                    {
#line 125 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                        var intermediateValuesAuM = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line hidden
                                                                            {
#line 126 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                var intermediateValuesP = Allocate__.Apply((fixedBiggestSize * (value - 1L)));
#line hidden
                                                                                bool __arg9__ = true;
                                                                                try
                                                                                {
#line hidden
                                                                                    {
#line 127 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                        var intermediateValuesP1 = Allocate__.Apply(((fixedBiggestSize + 1L) * (value - 1L)));
#line hidden
                                                                                        bool __arg10__ = true;
                                                                                        try
                                                                                        {
#line hidden
                                                                                            {
#line 129 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                var nPad1 = Allocate__.Apply((fixedBiggestSize + 1L));
#line hidden
                                                                                                bool __arg11__ = true;
                                                                                                try
                                                                                                {
#line hidden
                                                                                                    {
#line 130 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                        var nPad2 = Allocate__.Apply((fixedBiggestSize + 1L));
#line hidden
                                                                                                        bool __arg12__ = true;
                                                                                                        try
                                                                                                        {
#line hidden
                                                                                                            {
#line 132 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                var newNQ = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                bool __arg13__ = true;
                                                                                                                try
                                                                                                                {
#line hidden
                                                                                                                    {
#line 133 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                        var newDQ = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                        bool __arg14__ = true;
                                                                                                                        try
                                                                                                                        {
#line hidden
                                                                                                                            {
#line 134 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                var newApproxDenom1 = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                                bool __arg15__ = true;
                                                                                                                                try
                                                                                                                                {
#line hidden
                                                                                                                                    {
#line 135 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                        var newApproxDenom2 = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                                        bool __arg16__ = true;
                                                                                                                                        try
                                                                                                                                        {
#line hidden
                                                                                                                                            {
#line 136 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                var newAuxDiv = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                                                bool __arg17__ = true;
                                                                                                                                                try
                                                                                                                                                {
#line hidden
                                                                                                                                                    {
#line 137 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                        var newAuxMult = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                                                        bool __arg18__ = true;
                                                                                                                                                        try
                                                                                                                                                        {
#line hidden
                                                                                                                                                            {
#line 138 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                var newPad = Allocate__.Apply(fixedBiggestSize);
#line hidden
                                                                                                                                                                bool __arg19__ = true;
                                                                                                                                                                try
                                                                                                                                                                {
#line hidden
                                                                                                                                                                    {
#line 139 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                        var nP1 = Allocate__.Apply((fixedBiggestSize + 1L));
#line hidden
                                                                                                                                                                        bool __arg20__ = true;
                                                                                                                                                                        try
                                                                                                                                                                        {
#line 146 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                            foreach (var index in new QRange(0L, (fixedBiggestSize - 1L)))
#line hidden
                                                                                                                                                                            {
#line 147 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(kQ[index]), intermediateValuesNQ[index]));
#line 148 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(mQ[index]), intermediateValuesDQ[index]));
                                                                                                                                                                            }

#line 151 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                            foreach (var index in new QRange(fixedBiggestSize, (2L * fixedBiggestSize)))
#line hidden
                                                                                                                                                                            {
#line 152 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(kQ[index]), intermediateValuesNPad1[(index - fixedBiggestSize)]));
#line 153 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(mQ[index]), intermediateValuesNPad2[(index - fixedBiggestSize)]));
                                                                                                                                                                            }

#line 156 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                            var indexArr = new QArray<Int64>(QArray.Filled(() => -(1L), (target + 2L)));
#line 157 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                            indexArr.Modify(0L, 0L);
#line hidden
                                                                                                                                                                            {
#line 159 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                var controlQ = Allocate__.Apply();
#line hidden
                                                                                                                                                                                bool __arg21__ = true;
                                                                                                                                                                                try
                                                                                                                                                                                {
#line hidden
                                                                                                                                                                                    {
#line 160 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                        var areTheSame = Allocate__.Apply();
#line hidden
                                                                                                                                                                                        bool __arg22__ = true;
                                                                                                                                                                                        try
                                                                                                                                                                                        {
#line 163 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                            indexArr = new QArray<Int64>(pebbleStep__.Apply((0L, (value - 1L), target, indexArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, controlQ, areTheSame, fixedBiggestSize, nQ, reversing)));
#line 171 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                            Microsoft__Quantum__Intrinsic__X.Apply(controlQ);
#line 174 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                            foreach (var index in new QRange(0L, (fixedBiggestSize - 1L)))
#line hidden
                                                                                                                                                                                            {
#line 175 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(kQ[index]), intermediateValuesNQ[index]));
#line 176 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(mQ[index]), intermediateValuesDQ[index]));
                                                                                                                                                                                            }

#line 179 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                            foreach (var index in new QRange(fixedBiggestSize, (2L * fixedBiggestSize)))
#line hidden
                                                                                                                                                                                            {
#line 180 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(kQ[index]), intermediateValuesNPad1[(index - fixedBiggestSize)]));
#line 181 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                                                                                                                                                                Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(mQ[index]), intermediateValuesNPad2[(index - fixedBiggestSize)]));
                                                                                                                                                                                            }
                                                                                                                                                                                        }
#line hidden
                                                                                                                                                                                        catch
                                                                                                                                                                                        {
                                                                                                                                                                                            __arg22__ = false;
                                                                                                                                                                                            throw;
                                                                                                                                                                                        }
#line hidden
                                                                                                                                                                                        finally
                                                                                                                                                                                        {
                                                                                                                                                                                            if (__arg22__)
                                                                                                                                                                                            {
#line hidden
                                                                                                                                                                                                Release__.Apply(areTheSame);
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
#line hidden
                                                                                                                                                                                catch
                                                                                                                                                                                {
                                                                                                                                                                                    __arg21__ = false;
                                                                                                                                                                                    throw;
                                                                                                                                                                                }
#line hidden
                                                                                                                                                                                finally
                                                                                                                                                                                {
                                                                                                                                                                                    if (__arg21__)
                                                                                                                                                                                    {
#line hidden
                                                                                                                                                                                        Release__.Apply(controlQ);
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
#line hidden
                                                                                                                                                                        catch
                                                                                                                                                                        {
                                                                                                                                                                            __arg20__ = false;
                                                                                                                                                                            throw;
                                                                                                                                                                        }
#line hidden
                                                                                                                                                                        finally
                                                                                                                                                                        {
                                                                                                                                                                            if (__arg20__)
                                                                                                                                                                            {
#line hidden
                                                                                                                                                                                Release__.Apply(nP1);
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
#line hidden
                                                                                                                                                                catch
                                                                                                                                                                {
                                                                                                                                                                    __arg19__ = false;
                                                                                                                                                                    throw;
                                                                                                                                                                }
#line hidden
                                                                                                                                                                finally
                                                                                                                                                                {
                                                                                                                                                                    if (__arg19__)
                                                                                                                                                                    {
#line hidden
                                                                                                                                                                        Release__.Apply(newPad);
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
#line hidden
                                                                                                                                                        catch
                                                                                                                                                        {
                                                                                                                                                            __arg18__ = false;
                                                                                                                                                            throw;
                                                                                                                                                        }
#line hidden
                                                                                                                                                        finally
                                                                                                                                                        {
                                                                                                                                                            if (__arg18__)
                                                                                                                                                            {
#line hidden
                                                                                                                                                                Release__.Apply(newAuxMult);
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
#line hidden
                                                                                                                                                catch
                                                                                                                                                {
                                                                                                                                                    __arg17__ = false;
                                                                                                                                                    throw;
                                                                                                                                                }
#line hidden
                                                                                                                                                finally
                                                                                                                                                {
                                                                                                                                                    if (__arg17__)
                                                                                                                                                    {
#line hidden
                                                                                                                                                        Release__.Apply(newAuxDiv);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
#line hidden
                                                                                                                                        catch
                                                                                                                                        {
                                                                                                                                            __arg16__ = false;
                                                                                                                                            throw;
                                                                                                                                        }
#line hidden
                                                                                                                                        finally
                                                                                                                                        {
                                                                                                                                            if (__arg16__)
                                                                                                                                            {
#line hidden
                                                                                                                                                Release__.Apply(newApproxDenom2);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
#line hidden
                                                                                                                                catch
                                                                                                                                {
                                                                                                                                    __arg15__ = false;
                                                                                                                                    throw;
                                                                                                                                }
#line hidden
                                                                                                                                finally
                                                                                                                                {
                                                                                                                                    if (__arg15__)
                                                                                                                                    {
#line hidden
                                                                                                                                        Release__.Apply(newApproxDenom1);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
#line hidden
                                                                                                                        catch
                                                                                                                        {
                                                                                                                            __arg14__ = false;
                                                                                                                            throw;
                                                                                                                        }
#line hidden
                                                                                                                        finally
                                                                                                                        {
                                                                                                                            if (__arg14__)
                                                                                                                            {
#line hidden
                                                                                                                                Release__.Apply(newDQ);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
#line hidden
                                                                                                                catch
                                                                                                                {
                                                                                                                    __arg13__ = false;
                                                                                                                    throw;
                                                                                                                }
#line hidden
                                                                                                                finally
                                                                                                                {
                                                                                                                    if (__arg13__)
                                                                                                                    {
#line hidden
                                                                                                                        Release__.Apply(newNQ);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
#line hidden
                                                                                                        catch
                                                                                                        {
                                                                                                            __arg12__ = false;
                                                                                                            throw;
                                                                                                        }
#line hidden
                                                                                                        finally
                                                                                                        {
                                                                                                            if (__arg12__)
                                                                                                            {
#line hidden
                                                                                                                Release__.Apply(nPad2);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
#line hidden
                                                                                                catch
                                                                                                {
                                                                                                    __arg11__ = false;
                                                                                                    throw;
                                                                                                }
#line hidden
                                                                                                finally
                                                                                                {
                                                                                                    if (__arg11__)
                                                                                                    {
#line hidden
                                                                                                        Release__.Apply(nPad1);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
#line hidden
                                                                                        catch
                                                                                        {
                                                                                            __arg10__ = false;
                                                                                            throw;
                                                                                        }
#line hidden
                                                                                        finally
                                                                                        {
                                                                                            if (__arg10__)
                                                                                            {
#line hidden
                                                                                                Release__.Apply(intermediateValuesP1);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
#line hidden
                                                                                catch
                                                                                {
                                                                                    __arg9__ = false;
                                                                                    throw;
                                                                                }
#line hidden
                                                                                finally
                                                                                {
                                                                                    if (__arg9__)
                                                                                    {
#line hidden
                                                                                        Release__.Apply(intermediateValuesP);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(intermediateValuesAuM);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(intermediateValuesAuD);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(intermediateValuesAD2);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(intermediateValuesAD1);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(intermediateValuesNPad2);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(intermediateValuesNPad1);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(intermediateValuesDQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(intermediateValuesNQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__Log = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Log));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.pebbleStep__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(pebbleStep));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> kQ, IQArray<Qubit> mQ, IQArray<Qubit> nQ, IQArray<Qubit> result, Boolean reversing)
        {
            return __m__.Run<CF, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Boolean), QVoid>((kQ, mQ, nQ, result, reversing));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 189, 194)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Adjoint, 189, 194)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Controlled, 189, 194)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.ControlledAdjoint, 189, 194)]
    public partial class andGate : Unitary<(Qubit,Qubit,Qubit)>, ICallable
    {
        public andGate(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,Qubit,Qubit)>, IApplyData
        {
            public In((Qubit,Qubit,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item1;
                    yield return Data.Item2;
                    yield return Data.Item3;
                }
            }
        }

        String ICallable.Name => "andGate";
        String ICallable.FullName => "ContinuedFraction.Testing.andGate";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Qubit,Qubit,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (qubit1,qubit2,qubit3) = __in__;
#line 190 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(qubit1), qubit3));
#line 191 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(qubit2), qubit3));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,Qubit,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (qubit1,qubit2,qubit3) = __in__;
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(qubit2), qubit3));
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(qubit1), qubit3));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Qubit,Qubit,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(qubit1,qubit2,qubit3)) = __in__;
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qubit1), qubit3)));
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qubit2), qubit3)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Qubit,Qubit,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(qubit1,qubit2,qubit3)) = __in__;
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qubit2), qubit3)));
#line 189 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(qubit1), qubit3)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Qubit,Qubit,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit qubit1, Qubit qubit2, Qubit qubit3)
        {
            return __m__.Run<andGate, (Qubit,Qubit,Qubit), QVoid>((qubit1, qubit2, qubit3));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 194, 200)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Adjoint, 194, 200)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Controlled, 194, 200)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.ControlledAdjoint, 194, 200)]
    public partial class ApplyToEachX : Unitary<IQArray<Qubit>>, ICallable
    {
        public ApplyToEachX(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ApplyToEachX";
        String ICallable.FullName => "ContinuedFraction.Testing.ApplyToEachX";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var target = __in__;
#line 195 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var index in new QRange(0L, (target.Length - 1L)))
#line hidden
            {
#line 196 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Intrinsic__X.Apply(target[index]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<IQArray<Qubit>, QVoid> __AdjointBody__ => (__in__) =>
        {
            var target = __in__;
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var __qsVar0__index__ in RangeReverse__.Apply(new QRange(0L, (target.Length - 1L))))
#line hidden
            {
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target[__qsVar0__index__]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var index in new QRange(0L, (target.Length - 1L)))
#line hidden
            {
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, target[index]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,target) = __in__;
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var __qsVar0__index__ in RangeReverse__.Apply(new QRange(0L, (target.Length - 1L))))
#line hidden
            {
#line 194 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, target[__qsVar0__index__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> target)
        {
            return __m__.Run<ApplyToEachX, IQArray<Qubit>, QVoid>(target);
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 200, 236)]
    public partial class pebbleCFStep : Operation<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid>, ICallable
    {
        public pebbleCFStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits);
                }
            }
        }

        String ICallable.Name => "pebbleCFStep";
        String ICallable.FullName => "ContinuedFraction.Testing.pebbleCFStep";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Int64> computeValue__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)> ContinuedFractionStep__Testing__CFStep
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid> __Body__ => (__in__) =>
        {
            var (currNQ,currDQ,currApproxDenom1,currApproxDenom2,newNQ,newDQ,newApproxDenom1,newApproxDenom2,newAuxDiv,newAuxMult,newPad,nP1,convergenceIndex,adj) = __in__;
#line 208 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            if (!(adj))
            {
#line 209 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currNQ), new Microsoft.Quantum.Arithmetic.LittleEndian(newNQ)));
#line 210 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currDQ), new Microsoft.Quantum.Arithmetic.LittleEndian(newDQ)));
#line 211 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currApproxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom1)));
#line 212 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currApproxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom2)));
#line 215 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var zeroDiv = computeValue__.Apply(currDQ);
#line 216 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if ((zeroDiv != 0L))
                {
#line 217 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    ContinuedFractionStep__Testing__CFStep.Apply((newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nP1, convergenceIndex));
                }
            }
            else
            {
#line 221 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var zeroDiv = computeValue__.Apply(currDQ);
#line 222 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if ((zeroDiv != 0L))
                {
#line 224 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    ContinuedFractionStep__Testing__CFStep.Adjoint.Apply((newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nP1, convergenceIndex));
                }

#line 227 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currNQ), new Microsoft.Quantum.Arithmetic.LittleEndian(newNQ)));
#line 228 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currDQ), new Microsoft.Quantum.Arithmetic.LittleEndian(newDQ)));
#line 229 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currApproxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom1)));
#line 230 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(currApproxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom2)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.computeValue__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, Int64>>(typeof(computeValue));
            this.ContinuedFractionStep__Testing__CFStep = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)>>(typeof(global::ContinuedFractionStep.Testing.CFStep));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> currNQ, IQArray<Qubit> currDQ, IQArray<Qubit> currApproxDenom1, IQArray<Qubit> currApproxDenom2, IQArray<Qubit> newNQ, IQArray<Qubit> newDQ, IQArray<Qubit> newApproxDenom1, IQArray<Qubit> newApproxDenom2, IQArray<Qubit> newAuxDiv, IQArray<Qubit> newAuxMult, IQArray<Qubit> newPad, IQArray<Qubit> nP1, Int64 convergenceIndex, Boolean adj)
        {
            return __m__.Run<pebbleCFStep, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid>((currNQ, currDQ, currApproxDenom1, currApproxDenom2, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nP1, convergenceIndex, adj));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 236, 274)]
    public partial class garbageAddition : Operation<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean), QVoid>, ICallable
    {
        public garbageAddition(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "garbageAddition";
        String ICallable.FullName => "ContinuedFraction.Testing.garbageAddition";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean), QVoid> __Body__ => (__in__) =>
        {
            var (toAdd,target,control,reversing) = __in__;
#line hidden
            {
#line 238 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var temp = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 239 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(control), temp));
#line 240 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(control);
#line 241 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    if (!(reversing))
                    {
#line 242 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(toAdd), new Microsoft.Quantum.Arithmetic.LittleEndian(target))));
                    }
                    else
                    {
#line 244 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(toAdd), new Microsoft.Quantum.Arithmetic.LittleEndian(target))));
                    }

#line 246 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    var value = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(temp)));
#line 247 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    if ((value == 1L))
                    {
#line 248 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(control);
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(temp);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> toAdd, IQArray<Qubit> target, Qubit control, Boolean reversing)
        {
            return __m__.Run<garbageAddition, (IQArray<Qubit>,IQArray<Qubit>,Qubit,Boolean), QVoid>((toAdd, target, control, reversing));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 274, 660)]
    public partial class pebbleStep : Operation<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>, ICallable
    {
        public pebbleStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits, ((IApplyData)Data.Item13)?.Qubits, ((IApplyData)Data.Item14)?.Qubits, ((IApplyData)Data.Item15)?.Qubits, ((IApplyData)Data.Item16)?.Qubits, ((IApplyData)Data.Item17)?.Qubits, ((IApplyData)Data.Item18)?.Qubits, ((IApplyData)Data.Item19)?.Qubits, ((IApplyData)Data.Item20)?.Qubits, ((IApplyData)Data.Item21)?.Qubits, ((IApplyData)Data.Item22)?.Qubits, ((IApplyData)Data.Item23)?.Qubits, ((IApplyData)Data.Item24)?.Qubits, ((IApplyData)Data.Item25)?.Qubits, ((IApplyData)Data.Item26)?.Qubits, ((IApplyData)Data.Item27)?.Qubits, ((IApplyData)Data.Item29)?.Qubits);
                }
            }
        }

        String ICallable.Name => "pebbleStep";
        String ICallable.FullName => "ContinuedFraction.Testing.pebbleStep";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__PowI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> self
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid> pebbleCFStep__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> Microsoft__Quantum__Arithmetic__GreaterThan
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Int64> computeValue__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Boolean> Microsoft__Quantum__Logical__EqualI
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__IndexOf
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit,Qubit)> andGate__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> SWAP__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> unpebbleStep__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (currentIndex,maximumIndex,targetIndex,indexArr,intermediateValuesNQ,intermediateValuesDQ,intermediateValuesAD1,intermediateValuesAD2,intermediateValuesAuD,intermediateValuesAuM,intermediateValuesP,intermediateValuesNPad1,intermediateValuesNPad2,intermediateValuesP1,newNQ,newDQ,newApproxDenom1,newApproxDenom2,newAuxDiv,newAuxMult,newPad,nPad1,nPad2,nP1,result,control,areTheSame,fixedBiggestSize,bound,reversing) = __in__;
#line 284 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var tempArr = new QArray<Int64>(indexArr);
#line 287 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            if ((maximumIndex != 0L))
            {
#line 288 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var nextIndex = (currentIndex + Microsoft__Quantum__Math__PowI.Apply((2L, (maximumIndex - 1L))));
#line 289 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                tempArr = new QArray<Int64>(self.Apply<IQArray<Int64>>((currentIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
#line 295 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var startIndexInter = 0L;
#line 297 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if (((tempArr[targetIndex] != -(1L)) || (nextIndex < targetIndex)))
                {
#line 318 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    pebbleCFStep__.Apply((QArray<Qubit>.Add(intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), QArray<Qubit>.Add(intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), QArray<Qubit>.Add(newNQ, nPad1), QArray<Qubit>.Add(newDQ, nPad2), newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nP1, (nextIndex - 1L), false));
#line hidden
                    {
#line 367 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        var greater = Allocate__.Apply();
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line hidden
                            {
#line 368 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                var bPad = Allocate__.Apply(newPad.Length);
#line hidden
                                bool __arg2__ = true;
                                try
                                {
#line 370 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__GreaterThan.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(newApproxDenom1, newPad)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bound, bPad)), greater));
#line 371 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    var greaterValue = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(greater)));
#line 372 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    var denomVal = computeValue__.Apply(newDQ);
#line 380 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    if ((greaterValue == 1L))
                                    {
#line hidden
                                        {
#line 382 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            var temp = Allocate__.Apply();
#line hidden
                                            bool __arg3__ = true;
                                            try
                                            {
#line 383 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(control), temp));
#line 384 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                Microsoft__Quantum__Intrinsic__X.Apply(control);
#line 385 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                if (!(reversing))
                                                {
#line 386 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom2.Slice(new QRange(0L, (result.Length - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
                                                }
                                                else
                                                {
#line 388 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom2.Slice(new QRange(0L, (result.Length - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
                                                }

#line 390 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                var value = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(temp)));
#line 391 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                if ((value == 1L))
                                                {
#line 392 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(control);
                                                }
                                            }
#line hidden
                                            catch
                                            {
                                                __arg3__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg3__)
                                                {
#line hidden
                                                    Release__.Apply(temp);
                                                }
                                            }
                                        }
                                    }
                                    else if ((denomVal == 0L))
                                    {
#line hidden
                                        {
#line 395 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            var temp = Allocate__.Apply();
#line hidden
                                            bool __arg4__ = true;
                                            try
                                            {
#line 396 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(control), temp));
#line 397 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                Microsoft__Quantum__Intrinsic__X.Apply(control);
#line 398 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                if (!(reversing))
                                                {
#line 399 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom1.Slice(new QRange(0L, (result.Length - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
                                                }
                                                else
                                                {
#line 401 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(control), (new Microsoft.Quantum.Arithmetic.LittleEndian(newApproxDenom1.Slice(new QRange(0L, (result.Length - 1L)))), new Microsoft.Quantum.Arithmetic.LittleEndian(result))));
                                                }

#line 403 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                var value = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(temp)));
#line 404 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                if ((value == 1L))
                                                {
#line 405 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(control);
                                                }
                                            }
#line hidden
                                            catch
                                            {
                                                __arg4__ = false;
                                                throw;
                                            }
#line hidden
                                            finally
                                            {
                                                if (__arg4__)
                                                {
#line hidden
                                                    Release__.Apply(temp);
                                                }
                                            }
                                        }
                                    }

#line 435 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    var count = 0L;
#line 436 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    var found = false;
#line 437 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, (tempArr.Length - 1L)))
#line hidden
                                    {
#line 438 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        var predicate = Microsoft__Quantum__Logical__EqualI.Partial(new Func<Int64, (Int64,Int64)>((__arg5__) => (__arg5__, ((count + 1L) * fixedBiggestSize))));
#line 439 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        if (((Microsoft__Quantum__Arrays__IndexOf.Apply<Int64>((predicate, tempArr?.Copy())) == -(1L)) && !(found)))
                                        {
#line 440 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            found = true;
                                        }
                                        else if (!(found))
                                        {
#line 442 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                            count = (count + 1L);
                                        }
                                    }

#line 445 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    startIndexInter = ((count + 1L) * fixedBiggestSize);
#line 447 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, fixedBiggestSize))
#line hidden
                                    {
#line 448 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]), intermediateValuesNPad1[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))]));
#line 454 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]), intermediateValuesNPad2[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))]));
#line 460 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesP1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]), intermediateValuesP1[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))]));
                                    }

#line 468 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, (fixedBiggestSize - 1L)))
#line hidden
                                    {
#line 469 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesNQ[(index + startIndexInter)]));
#line 474 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesDQ[(index + startIndexInter)]));
#line 479 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesAD1[(index + startIndexInter)]));
#line 484 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesAD2[(index + startIndexInter)]));
#line 489 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesAuD.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesAuD[(index + startIndexInter)]));
#line 494 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesAuM.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesAuM[(index + startIndexInter)]));
#line 499 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(intermediateValuesP.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]), intermediateValuesP[(index + startIndexInter)]));
                                    }

#line 505 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, fixedBiggestSize))
#line hidden
                                    {
#line 506 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((nPad1[index], intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], areTheSame));
#line 510 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]));
#line 513 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((nPad1[index], intermediateValuesNPad1[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))], areTheSame));
#line 517 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((nPad2[index], intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], areTheSame));
#line 521 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]));
#line 524 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((nPad2[index], intermediateValuesNPad2[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))], areTheSame));
#line 528 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((nP1[index], intermediateValuesP1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], areTheSame));
#line 532 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesP1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index]));
#line 535 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((nP1[index], intermediateValuesP1[(index + ((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)))], areTheSame));
                                    }

#line 541 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, (fixedBiggestSize - 1L)))
#line hidden
                                    {
#line 543 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newNQ[index], intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 545 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 547 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newNQ[index], intermediateValuesNQ[(index + startIndexInter)], areTheSame));
#line 549 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newDQ[index], intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 551 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 553 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newDQ[index], intermediateValuesDQ[(index + startIndexInter)], areTheSame));
#line 555 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newApproxDenom1[index], intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 557 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 559 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newApproxDenom1[index], intermediateValuesAD1[(index + startIndexInter)], areTheSame));
#line 561 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newApproxDenom2[index], intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 563 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 565 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newApproxDenom2[index], intermediateValuesAD2[(index + startIndexInter)], areTheSame));
#line 567 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newAuxDiv[index], intermediateValuesAuD.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 569 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesAuD.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 571 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newAuxDiv[index], intermediateValuesAuD[(index + startIndexInter)], areTheSame));
#line 573 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newAuxMult[index], intermediateValuesAuM.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 575 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesAuM.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 577 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newAuxMult[index], intermediateValuesAuM[(index + startIndexInter)], areTheSame));
#line 579 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Apply((newPad[index], intermediateValuesP.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], areTheSame));
#line 581 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(areTheSame), intermediateValuesP.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index]));
#line 583 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        andGate__.Adjoint.Apply((newPad[index], intermediateValuesP[(index + startIndexInter)], areTheSame));
                                    }

#line 587 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    pebbleCFStep__.Apply((QArray<Qubit>.Add(intermediateValuesNQ.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesNPad1.Slice(new QRange(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), QArray<Qubit>.Add(intermediateValuesDQ.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesNPad2.Slice(new QRange(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), intermediateValuesAD1.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesAD2.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), QArray<Qubit>.Add(newNQ, nPad1), QArray<Qubit>.Add(newDQ, nPad2), newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nP1, (nextIndex - 1L), true));
#line 600 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, fixedBiggestSize))
#line hidden
                                    {
#line 601 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], intermediateValuesNPad1[(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + index)]));
#line 605 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], intermediateValuesNPad2[(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + index)]));
#line 609 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesP1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))[index], intermediateValuesP1[(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + index)]));
                                    }

#line 614 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    foreach (var index in new QRange(0L, (fixedBiggestSize - 1L)))
#line hidden
                                    {
#line 615 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesNQ[(startIndexInter + index)]));
#line 618 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesDQ[(startIndexInter + index)]));
#line 621 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesAD1[(startIndexInter + index)]));
#line 624 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesAD2[(startIndexInter + index)]));
#line 627 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesAuD.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesAuD[(startIndexInter + index)]));
#line 630 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesAuM.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesAuM[(startIndexInter + index)]));
#line 633 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                        SWAP__.Apply((intermediateValuesP.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L)))[index], intermediateValuesP[(startIndexInter + index)]));
                                    }

#line 637 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                                    tempArr.Modify(nextIndex, startIndexInter);
                                }
#line hidden
                                catch
                                {
                                    __arg2__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg2__)
                                    {
#line hidden
                                        Release__.Apply(bPad);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(greater);
                            }
                        }
                    }
                }

#line 642 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                tempArr = new QArray<Int64>(unpebbleStep__.Apply((currentIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
#line 648 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if (((tempArr[targetIndex] != -(1L)) || (nextIndex < targetIndex)))
                {
#line 649 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    tempArr = new QArray<Int64>(self.Apply<IQArray<Int64>>((nextIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
                }
            }

#line 657 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            return tempArr;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PowI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.PowI));
            this.self = this;
            this.pebbleCFStep__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid>>(typeof(pebbleCFStep));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Arithmetic__GreaterThan = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(global::Microsoft.Quantum.Arithmetic.GreaterThan));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.computeValue__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, Int64>>(typeof(computeValue));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Logical__EqualI = this.__Factory__.Get<ICallable<(Int64,Int64), Boolean>>(typeof(global::Microsoft.Quantum.Logical.EqualI));
            this.Microsoft__Quantum__Arrays__IndexOf = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.IndexOf<>));
            this.andGate__ = this.__Factory__.Get<IUnitary<(Qubit,Qubit,Qubit)>>(typeof(andGate));
            this.SWAP__ = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.unpebbleStep__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(unpebbleStep));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 currentIndex, Int64 maximumIndex, Int64 targetIndex, IQArray<Int64> indexArr, IQArray<Qubit> intermediateValuesNQ, IQArray<Qubit> intermediateValuesDQ, IQArray<Qubit> intermediateValuesAD1, IQArray<Qubit> intermediateValuesAD2, IQArray<Qubit> intermediateValuesAuD, IQArray<Qubit> intermediateValuesAuM, IQArray<Qubit> intermediateValuesP, IQArray<Qubit> intermediateValuesNPad1, IQArray<Qubit> intermediateValuesNPad2, IQArray<Qubit> intermediateValuesP1, IQArray<Qubit> newNQ, IQArray<Qubit> newDQ, IQArray<Qubit> newApproxDenom1, IQArray<Qubit> newApproxDenom2, IQArray<Qubit> newAuxDiv, IQArray<Qubit> newAuxMult, IQArray<Qubit> newPad, IQArray<Qubit> nPad1, IQArray<Qubit> nPad2, IQArray<Qubit> nP1, IQArray<Qubit> result, Qubit control, Qubit areTheSame, Int64 fixedBiggestSize, IQArray<Qubit> bound, Boolean reversing)
        {
            return __m__.Run<pebbleStep, (Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>((currentIndex, maximumIndex, targetIndex, indexArr, intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 660, 675)]
    public partial class computeValue : Operation<IQArray<Qubit>, Int64>, ICallable
    {
        public computeValue(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "computeValue";
        String ICallable.FullName => "ContinuedFraction.Testing.computeValue";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, Int64> __Body__ => (__in__) =>
        {
            var arrQ = __in__;
#line 661 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var result = 0L;
#line 662 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var power = 1L;
#line 663 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            foreach (var index in new QRange(0L, (arrQ.Length - 1L)))
#line hidden
            {
#line hidden
                {
#line 664 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    var temp = Allocate__.Apply();
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 665 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(arrQ[index]), temp));
#line 666 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        var res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(temp)));
#line 667 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        if ((res == 1L))
                        {
#line 668 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                            result = (result + power);
                        }

#line 670 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                        power = (power * 2L);
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(temp);
                        }
                    }
                }
            }

#line 672 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Qubit> arrQ)
        {
            return __m__.Run<computeValue, IQArray<Qubit>, Int64>(arrQ);
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs", OperationFunctor.Body, 675, -1)]
    public partial class unpebbleStep : Operation<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>, ICallable
    {
        public unpebbleStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean)>, IApplyData
        {
            public In((Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits, ((IApplyData)Data.Item9)?.Qubits, ((IApplyData)Data.Item10)?.Qubits, ((IApplyData)Data.Item11)?.Qubits, ((IApplyData)Data.Item12)?.Qubits, ((IApplyData)Data.Item13)?.Qubits, ((IApplyData)Data.Item14)?.Qubits, ((IApplyData)Data.Item15)?.Qubits, ((IApplyData)Data.Item16)?.Qubits, ((IApplyData)Data.Item17)?.Qubits, ((IApplyData)Data.Item18)?.Qubits, ((IApplyData)Data.Item19)?.Qubits, ((IApplyData)Data.Item20)?.Qubits, ((IApplyData)Data.Item21)?.Qubits, ((IApplyData)Data.Item22)?.Qubits, ((IApplyData)Data.Item23)?.Qubits, ((IApplyData)Data.Item24)?.Qubits, ((IApplyData)Data.Item25)?.Qubits, ((IApplyData)Data.Item26)?.Qubits, ((IApplyData)Data.Item27)?.Qubits, ((IApplyData)Data.Item29)?.Qubits);
                }
            }
        }

        String ICallable.Name => "unpebbleStep";
        String ICallable.FullName => "ContinuedFraction.Testing.unpebbleStep";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__PowI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> self
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> pebbleStep__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid> pebbleCFStep__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (currentIndex,maximumIndex,targetIndex,indexArr,intermediateValuesNQ,intermediateValuesDQ,intermediateValuesAD1,intermediateValuesAD2,intermediateValuesAuD,intermediateValuesAuM,intermediateValuesP,intermediateValuesNPad1,intermediateValuesNPad2,intermediateValuesP1,newNQ,newDQ,newApproxDenom1,newApproxDenom2,newAuxDiv,newAuxMult,newPad,nPad1,nPad2,nP1,result,control,areTheSame,fixedBiggestSize,bound,reversing) = __in__;
#line 685 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            var tempArr = new QArray<Int64>(indexArr);
#line 687 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            if ((maximumIndex != 0L))
            {
#line 688 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                var nextIndex = (currentIndex + Microsoft__Quantum__Math__PowI.Apply((2L, (maximumIndex - 1L))));
#line 690 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                tempArr = new QArray<Int64>(self.Apply<IQArray<Int64>>((nextIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
#line 696 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                tempArr = new QArray<Int64>(pebbleStep__.Apply((currentIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
#line 702 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                if ((nextIndex < targetIndex))
                {
#line 703 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    var startIndexInter = tempArr[nextIndex];
#line 704 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    tempArr.Modify(nextIndex, -(1L));
#line 706 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                    pebbleCFStep__.Apply((QArray<Qubit>.Add(intermediateValuesNQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesNPad1.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), QArray<Qubit>.Add(intermediateValuesDQ.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesNPad2.Slice(new QRange(((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((tempArr[(nextIndex - 1L)] / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), intermediateValuesAD1.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), intermediateValuesAD2.Slice(new QRange(tempArr[(nextIndex - 1L)], ((tempArr[(nextIndex - 1L)] + fixedBiggestSize) - 1L))), QArray<Qubit>.Add(intermediateValuesNQ.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesNPad1.Slice(new QRange(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), QArray<Qubit>.Add(intermediateValuesDQ.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesNPad2.Slice(new QRange(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize)))), intermediateValuesAD1.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesAD2.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesAuD.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesAuM.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesP.Slice(new QRange(startIndexInter, ((startIndexInter + fixedBiggestSize) - 1L))), intermediateValuesP1.Slice(new QRange(((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)), (((startIndexInter / fixedBiggestSize) * (fixedBiggestSize + 1L)) + fixedBiggestSize))), (nextIndex - 1L), true));
                }

#line 733 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
                tempArr = new QArray<Int64>(self.Apply<IQArray<Int64>>((currentIndex, (maximumIndex - 1L), targetIndex, tempArr?.Copy(), intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing)));
            }

#line 741 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFraction\\Program.qs"
            return tempArr;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PowI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.PowI));
            this.self = this;
            this.pebbleStep__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>>(typeof(pebbleStep));
            this.pebbleCFStep__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64,Boolean), QVoid>>(typeof(pebbleCFStep));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 currentIndex, Int64 maximumIndex, Int64 targetIndex, IQArray<Int64> indexArr, IQArray<Qubit> intermediateValuesNQ, IQArray<Qubit> intermediateValuesDQ, IQArray<Qubit> intermediateValuesAD1, IQArray<Qubit> intermediateValuesAD2, IQArray<Qubit> intermediateValuesAuD, IQArray<Qubit> intermediateValuesAuM, IQArray<Qubit> intermediateValuesP, IQArray<Qubit> intermediateValuesNPad1, IQArray<Qubit> intermediateValuesNPad2, IQArray<Qubit> intermediateValuesP1, IQArray<Qubit> newNQ, IQArray<Qubit> newDQ, IQArray<Qubit> newApproxDenom1, IQArray<Qubit> newApproxDenom2, IQArray<Qubit> newAuxDiv, IQArray<Qubit> newAuxMult, IQArray<Qubit> newPad, IQArray<Qubit> nPad1, IQArray<Qubit> nPad2, IQArray<Qubit> nP1, IQArray<Qubit> result, Qubit control, Qubit areTheSame, Int64 fixedBiggestSize, IQArray<Qubit> bound, Boolean reversing)
        {
            return __m__.Run<unpebbleStep, (Int64,Int64,Int64,IQArray<Int64>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Qubit,Qubit,Int64,IQArray<Qubit>,Boolean), IQArray<Int64>>((currentIndex, maximumIndex, targetIndex, indexArr, intermediateValuesNQ, intermediateValuesDQ, intermediateValuesAD1, intermediateValuesAD2, intermediateValuesAuD, intermediateValuesAuM, intermediateValuesP, intermediateValuesNPad1, intermediateValuesNPad2, intermediateValuesP1, newNQ, newDQ, newApproxDenom1, newApproxDenom2, newAuxDiv, newAuxMult, newPad, nPad1, nPad2, nP1, result, control, areTheSame, fixedBiggestSize, bound, reversing));
        }
    }
}