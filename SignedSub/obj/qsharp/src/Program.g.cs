//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"signedSub\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"signQubit\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":56}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"signedSub\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"signedSub\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":84}},\"Documentation\":[\"automatically generated QsAdjoint specialization for SignedSub.Testing.signedSub\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"signedSub\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":84}},\"Documentation\":[\"automatically generated QsControlled specialization for SignedSub.Testing.signedSub\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"signedSub\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":10,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":75},\"Item2\":{\"Line\":1,\"Column\":84}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for SignedSub.Testing.signedSub\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Subtract\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":21}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":32}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"aSign\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bSign\"]},\"Type\":{\"Case\":\"Bool\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":55},\"Item2\":{\"Line\":1,\"Column\":60}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"Bool\"},{\"Case\":\"Bool\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Subtract\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":20,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":45}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsAdjoint specialization for SignedSub.Testing.Testing_in_Superposition\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsControlled specialization for SignedSub.Testing.Testing_in_Superposition\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"SignedSub.Testing\",\"Name\":\"Testing_in_Superposition\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\SignedSub\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":62},\"Item2\":{\"Line\":1,\"Column\":71}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for SignedSub.Testing.Testing_in_Superposition\"]}")]
#line hidden
namespace SignedSub.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Body, 11, 21)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Adjoint, 11, 21)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Controlled, 11, 21)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.ControlledAdjoint, 11, 21)]
    public partial class signedSub : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public signedSub(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "signedSub";
        String ICallable.FullName => "SignedSub.Testing.signedSub";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)> Microsoft__Quantum__Arithmetic__GreaterThan
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (aQ,bQ,signQubit) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__GreaterThan.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), signQubit));
#line 15 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), new Microsoft.Quantum.Arithmetic.LittleEndian(aQ))));
#line 16 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(signQubit);
#line 18 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (aQ,bQ,signQubit) = __in__;
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ))));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(signQubit);
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Adjoint.Apply((new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), new Microsoft.Quantum.Arithmetic.LittleEndian(aQ))));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__GreaterThan.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), signQubit));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,signQubit)) = __in__;
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__GreaterThan.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), signQubit)));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), new Microsoft.Quantum.Arithmetic.LittleEndian(aQ)))));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((__controlQubits__, signQubit));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(aQ,bQ,signQubit)) = __in__;
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ)))));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Controlled.Apply((__controlQubits__, signQubit));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(signQubit), (new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), new Microsoft.Quantum.Arithmetic.LittleEndian(aQ)))));
#line 11 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            Microsoft__Quantum__Arithmetic__GreaterThan.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ), signQubit)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__GreaterThan = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Qubit)>>(typeof(global::Microsoft.Quantum.Arithmetic.GreaterThan));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> aQ, IQArray<Qubit> bQ, Qubit signQubit)
        {
            return __m__.Run<signedSub, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((aQ, bQ, signQubit));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Body, 21, 87)]
    public partial class Subtract : Operation<(System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean), Int64>, ICallable
    {
        public Subtract(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean)>, IApplyData
        {
            public In((System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Subtract";
        String ICallable.FullName => "SignedSub.Testing.Subtract";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Int64>, Int64> Microsoft__Quantum__Math__Max
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> signedSub__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean), Int64> __Body__ => (__in__) =>
        {
            var (a,b,aSign,bSign) = __in__;
#line 22 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            var aB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(a);
#line 23 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            var bB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(b);
#line hidden
            {
#line 25 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                var aQ = Allocate__.Apply(aB.Length);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 26 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                        var bQ = Allocate__.Apply(bB.Length);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 28 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                var padA = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - aQ.Length));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 29 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                        var padB = Allocate__.Apply((Microsoft__Quantum__Math__Max.Apply(new QArray<Int64>(aQ.Length, bQ.Length)) - bQ.Length));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 33 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                            foreach (var index in new QRange(0L, (aB.Length - 1L)))
#line hidden
                                            {
#line 34 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                if ((aB[index] == true))
                                                {
#line 35 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(aQ[index]);
                                                }
                                            }

#line 39 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                            foreach (var index in new QRange(0L, (bB.Length - 1L)))
#line hidden
                                            {
#line 40 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                if ((bB[index] == true))
                                                {
#line 41 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(bQ[index]);
                                                }
                                            }

#line hidden
                                            {
#line 44 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                var sign = Allocate__.Apply();
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line 45 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    var result = 0L;
#line 46 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    if (((aSign == true) && (bSign == true)))
                                                    {
#line 48 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        signedSub__.Apply((QArray<Qubit>.Add(aQ, padA), QArray<Qubit>.Add(bQ, padB), sign));
#line 49 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        var signRes = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(sign)));
#line 52 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        if ((signRes == 0L))
                                                        {
#line 53 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                            result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(aQ));
                                                        }
                                                        else
                                                        {
#line 55 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                            result = -(Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(bQ)));
                                                        }
                                                    }
                                                    else if (((aSign == true) && (bSign == false)))
                                                    {
#line 59 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB))));
#line 60 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB)));
                                                    }
                                                    else if (((aSign == false) && (bSign == true)))
                                                    {
#line 64 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(aQ, padA)), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB))));
#line 65 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        result = -(Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(bQ, padB))));
                                                    }
                                                    else
                                                    {
#line 70 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        signedSub__.Apply((QArray<Qubit>.Add(aQ, padA), QArray<Qubit>.Add(bQ, padB), sign));
#line 71 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        var signRes = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(new QArray<Qubit>(sign)));
#line 74 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                        if ((signRes == 0L))
                                                        {
#line 75 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                            result = -(Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(aQ)));
                                                        }
                                                        else
                                                        {
#line 77 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                            result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(bQ));
                                                        }
                                                    }

#line 81 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    ResetAll__.Apply(QArray<Qubit>.Add(QArray<Qubit>.Add(QArray<Qubit>.Add(QArray<Qubit>.Add(aQ, bQ), new QArray<Qubit>(sign)), padA), padB));
#line 83 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                                    return result;
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(sign);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(padB);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(padA);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Math__Max = this.__Factory__.Get<ICallable<IQArray<Int64>, Int64>>(typeof(global::Microsoft.Quantum.Math.Max));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.signedSub__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(signedSub));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, System.Numerics.BigInteger a, System.Numerics.BigInteger b, Boolean aSign, Boolean bSign)
        {
            return __m__.Run<Subtract, (System.Numerics.BigInteger,System.Numerics.BigInteger,Boolean,Boolean), Int64>((a, b, aSign, bSign));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Body, 87, -1)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Adjoint, 87, -1)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.Controlled, 87, -1)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs", OperationFunctor.ControlledAdjoint, 87, -1)]
    public partial class Testing_in_Superposition : Unitary<Int64>, ICallable
    {
        public Testing_in_Superposition(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Testing_in_Superposition";
        String ICallable.FullName => "SignedSub.Testing.Testing_in_Superposition";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var numQubits = __in__;
#line hidden
            {
#line 88 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                var aQ = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 89 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                        var bQ = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 91 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__H, aQ));
#line 92 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__H, bQ));
#line hidden
                            {
#line 94 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                var sign = Allocate__.Apply();
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 98 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ)));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(sign);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Int64, QVoid> __AdjointBody__ => (__in__) =>
        {
            var numQubits = __in__;
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                var __qsVar0__aQ__ = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                    {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                        var __qsVar1__bQ__ = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                var __qsVar2__sign__ = Allocate__.Apply();
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__aQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__bQ__)));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__sign__);
                                    }
                                }
                            }

#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, __qsVar1__bQ__));
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, __qsVar0__aQ__));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__bQ__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__aQ__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Int64), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,numQubits) = __in__;
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                var aQ = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                    {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                        var bQ = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Controlled.Apply((__controlQubits__, (Microsoft__Quantum__Intrinsic__H, aQ)));
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Controlled.Apply((__controlQubits__, (Microsoft__Quantum__Intrinsic__H, bQ)));
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                var sign = Allocate__.Apply();
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(aQ), new Microsoft.Quantum.Arithmetic.LittleEndian(bQ))));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(sign);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Int64), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,numQubits) = __in__;
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                var __qsVar0__aQ__ = Allocate__.Apply(numQubits);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                    {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                        var __qsVar1__bQ__ = Allocate__.Apply(numQubits);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                var __qsVar2__sign__ = Allocate__.Apply();
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                                    Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar0__aQ__), new Microsoft.Quantum.Arithmetic.LittleEndian(__qsVar1__bQ__))));
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(__qsVar2__sign__);
                                    }
                                }
                            }

#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Controlled.Apply((__controlQubits__, (Microsoft__Quantum__Intrinsic__H, __qsVar1__bQ__)));
#line 87 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\SignedSub\\Program.qs"
                            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Controlled.Apply((__controlQubits__, (Microsoft__Quantum__Intrinsic__H, __qsVar0__aQ__)));
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(__qsVar1__bQ__);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__aQ__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numQubits)
        {
            return __m__.Run<Testing_in_Superposition, Int64, QVoid>(numQubits);
        }
    }
}