//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"CFStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"dQ\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"approxDenom1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"approxDenom2\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":79}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"auxDiv\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":96}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"auxMult\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":10},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pad\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":28},\"Item2\":{\"Line\":2,\"Column\":31}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pad1\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":42},\"Item2\":{\"Line\":2,\"Column\":46}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"convergenceIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":57},\"Item2\":{\"Line\":2,\"Column\":73}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"CFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"CFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":89},\"Item2\":{\"Line\":2,\"Column\":98}},\"Documentation\":[\"automatically generated QsAdjoint specialization for ContinuedFractionStep.Testing.CFStep\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"CFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":89},\"Item2\":{\"Line\":2,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlled specialization for ContinuedFractionStep.Testing.CFStep\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"CFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":12,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":89},\"Item2\":{\"Line\":2,\"Column\":98}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for ContinuedFractionStep.Testing.CFStep\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"testCFStep\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":61,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"d\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"approxDenom1\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"approxDenom2\"]},\"Type\":{\"Case\":\"BigInt\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":66},\"Item2\":{\"Line\":1,\"Column\":78}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"convergenceIndex\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":88},\"Item2\":{\"Line\":1,\"Column\":104}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"size\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":111},\"Item2\":{\"Line\":1,\"Column\":115}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"BigInt\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"testCFStep\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":61,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"testCFSQubitCount\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"registerSize\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":41}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"ContinuedFractionStep.Testing\",\"Name\":\"testCFSQubitCount\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\andre\\\\OneDrive - University of Bath\\\\Anu3\\\\QuantumDissertationCode\\\\MyCode\\\\ContinuedFractionStep\\\\Program.qs\",\"Position\":{\"Item1\":124,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
#line hidden
namespace ContinuedFractionStep.Testing
{
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.Body, 13, 62)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.Adjoint, 13, 62)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.Controlled, 13, 62)]
    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.ControlledAdjoint, 13, 62)]
    public partial class CFStep : Unitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)>, ICallable
    {
        public CFStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits, ((IApplyData)Data.Item5)?.Qubits, ((IApplyData)Data.Item6)?.Qubits, ((IApplyData)Data.Item7)?.Qubits, ((IApplyData)Data.Item8)?.Qubits);
                }
            }
        }

        String ICallable.Name => "CFStep";
        String ICallable.FullName => "ContinuedFractionStep.Testing.CFStep";
        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__DivideI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> SWAP__
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__IncrementByInteger
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__AddI
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyI
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (nQ,dQ,approxDenom1,approxDenom2,auxDiv,auxMult,pad,pad1,convergenceIndex) = __in__;
#line 16 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            Microsoft__Quantum__Arithmetic__DivideI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(nQ), new Microsoft.Quantum.Arithmetic.LittleEndian(dQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxDiv, pad1))));
#line 18 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            foreach (var index in new QRange(0L, (nQ.Length - 1L)))
#line hidden
            {
#line 19 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                SWAP__.Apply((nQ[index], dQ[index]));
            }

#line 23 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            if ((convergenceIndex == 0L))
            {
#line 29 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
#line 30 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2)));
            }
            else if ((convergenceIndex == 1L))
            {
#line 34 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
#line 40 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
            }
            else
            {
#line 43 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__MultiplyI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad))));
#line 45 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad))));
#line 47 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var index in new QRange(0L, (approxDenom1.Length - 1L)))
#line hidden
                {
#line 48 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Apply((approxDenom1[index], approxDenom2[index]));
                }

#line 51 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var index in new QRange(0L, (approxDenom1.Length - 1L)))
#line hidden
                {
#line 52 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Apply((approxDenom1[index], auxMult[index]));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (nQ,dQ,approxDenom1,approxDenom2,auxDiv,auxMult,pad,pad1,convergenceIndex) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            if ((convergenceIndex == 0L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2)));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
            }
            else if ((convergenceIndex == 1L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Adjoint.Apply((1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1)));
            }
            else
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var __qsVar2__index__ in RangeReverse__.Apply(new QRange(0L, (approxDenom1.Length - 1L))))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Adjoint.Apply((approxDenom1[__qsVar2__index__], auxMult[__qsVar2__index__]));
                }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (approxDenom1.Length - 1L))))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Adjoint.Apply((approxDenom1[__qsVar1__index__], approxDenom2[__qsVar1__index__]));
                }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad))));
            }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            foreach (var __qsVar0__index__ in RangeReverse__.Apply(new QRange(0L, (nQ.Length - 1L))))
#line hidden
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                SWAP__.Adjoint.Apply((nQ[__qsVar0__index__], dQ[__qsVar0__index__]));
            }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Apply((new Microsoft.Quantum.Arithmetic.LittleEndian(nQ), new Microsoft.Quantum.Arithmetic.LittleEndian(dQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxDiv, pad1))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(nQ,dQ,approxDenom1,approxDenom2,auxDiv,auxMult,pad,pad1,convergenceIndex)) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            Microsoft__Quantum__Arithmetic__DivideI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(nQ), new Microsoft.Quantum.Arithmetic.LittleEndian(dQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxDiv, pad1)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            foreach (var index in new QRange(0L, (nQ.Length - 1L)))
#line hidden
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                SWAP__.Controlled.Apply((__controlQubits__, (nQ[index], dQ[index])));
            }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            if ((convergenceIndex == 0L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2))));
            }
            else if ((convergenceIndex == 1L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
            }
            else
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__MultiplyI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var index in new QRange(0L, (approxDenom1.Length - 1L)))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Controlled.Apply((__controlQubits__, (approxDenom1[index], approxDenom2[index])));
                }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var index in new QRange(0L, (approxDenom1.Length - 1L)))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Controlled.Apply((__controlQubits__, (approxDenom1[index], auxMult[index])));
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(nQ,dQ,approxDenom1,approxDenom2,auxDiv,auxMult,pad,pad1,convergenceIndex)) = __in__;
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            if ((convergenceIndex == 0L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
            }
            else if ((convergenceIndex == 1L))
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__IncrementByInteger.Adjoint.Adjoint.Controlled.Apply((__controlQubits__, (1L, new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1))));
            }
            else
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var __qsVar2__index__ in RangeReverse__.Apply(new QRange(0L, (approxDenom1.Length - 1L))))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Adjoint.Controlled.Apply((__controlQubits__, (approxDenom1[__qsVar2__index__], auxMult[__qsVar2__index__])));
                }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                foreach (var __qsVar1__index__ in RangeReverse__.Apply(new QRange(0L, (approxDenom1.Length - 1L))))
#line hidden
                {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    SWAP__.Adjoint.Controlled.Apply((__controlQubits__, (approxDenom1[__qsVar1__index__], approxDenom2[__qsVar1__index__])));
                }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__AddI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom2), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad)))));
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                Microsoft__Quantum__Arithmetic__MultiplyI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(approxDenom1), new Microsoft.Quantum.Arithmetic.LittleEndian(auxDiv), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxMult, pad)))));
            }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            foreach (var __qsVar0__index__ in RangeReverse__.Apply(new QRange(0L, (nQ.Length - 1L))))
#line hidden
            {
#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                SWAP__.Adjoint.Controlled.Apply((__controlQubits__, (nQ[__qsVar0__index__], dQ[__qsVar0__index__])));
            }

#line 13 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            Microsoft__Quantum__Arithmetic__DivideI.Adjoint.Controlled.Apply((__controlQubits__, (new Microsoft.Quantum.Arithmetic.LittleEndian(nQ), new Microsoft.Quantum.Arithmetic.LittleEndian(dQ), new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(auxDiv, pad1)))));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__DivideI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.DivideI));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.SWAP__ = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.SWAP));
            this.Microsoft__Quantum__Arithmetic__IncrementByInteger = this.__Factory__.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.IncrementByInteger));
            this.Microsoft__Quantum__Arithmetic__AddI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.AddI));
            this.Microsoft__Quantum__Arithmetic__MultiplyI = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyI));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> nQ, IQArray<Qubit> dQ, IQArray<Qubit> approxDenom1, IQArray<Qubit> approxDenom2, IQArray<Qubit> auxDiv, IQArray<Qubit> auxMult, IQArray<Qubit> pad, IQArray<Qubit> pad1, Int64 convergenceIndex)
        {
            return __m__.Run<CFStep, (IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64), QVoid>((nQ, dQ, approxDenom1, approxDenom2, auxDiv, auxMult, pad, pad1, convergenceIndex));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.Body, 62, 125)]
    public partial class testCFStep : Operation<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64), IQArray<Int64>>, ICallable
    {
        public testCFStep(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64)>, IApplyData
        {
            public In((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "testCFStep";
        String ICallable.FullName => "ContinuedFractionStep.Testing.testCFStep";
        protected ICallable<System.Numerics.BigInteger, IQArray<Boolean>> Microsoft__Quantum__Convert__BigIntAsBoolArray
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)> CFStep__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (n,d,approxDenom1,approxDenom2,convergenceIndex,size) = __in__;
#line 64 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            var nB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(n);
#line 65 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            var dB = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(d);
#line 66 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            var a1B = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(approxDenom1);
#line 67 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
            var a2B = (IQArray<Boolean>)Microsoft__Quantum__Convert__BigIntAsBoolArray.Apply(approxDenom2);
#line hidden
            {
#line 70 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                var nQ = Allocate__.Apply(size);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 72 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                    foreach (var index in new QRange(0L, (nB.Length - 1L)))
#line hidden
                    {
#line 73 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                        if ((nB[index] == true))
                        {
#line 74 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(nQ[index]);
                        }
                    }

#line hidden
                    {
#line 78 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                        var dQ = Allocate__.Apply(size);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 80 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                            foreach (var index in new QRange(0L, (dB.Length - 1L)))
#line hidden
                            {
#line 81 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                if ((dB[index] == true))
                                {
#line 82 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(dQ[index]);
                                }
                            }

#line hidden
                            {
#line 88 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                var a1Q = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 90 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                    foreach (var index in new QRange(0L, (a1B.Length - 1L)))
#line hidden
                                    {
#line 91 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                        if ((a1B[index] == true))
                                        {
#line 92 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                            Microsoft__Quantum__Intrinsic__X.Apply(a1Q[index]);
                                        }
                                    }

#line hidden
                                    {
#line 96 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                        var a2Q = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line 98 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                            foreach (var index in new QRange(0L, (a2B.Length - 1L)))
#line hidden
                                            {
#line 99 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                if ((a2B[index] == true))
                                                {
#line 100 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                    Microsoft__Quantum__Intrinsic__X.Apply(a2Q[index]);
                                                }
                                            }

#line hidden
                                            {
#line 104 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                var auxDiv = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line hidden
                                                    {
#line 105 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                        var auxMult = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line hidden
                                                            {
#line 106 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                var pad = Allocate__.Apply(((size - 1L) / 2L));
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line hidden
                                                                    {
#line 107 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                        var pad1 = Allocate__.Apply((((size - 1L) / 2L) + 1L));
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 108 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            CFStep__.Apply((nQ, dQ, a1Q, a2Q, auxDiv, auxMult, pad, pad1, convergenceIndex));
#line 112 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            var nRes = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(nQ));
#line 113 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            var dRes = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(dQ));
#line 114 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            var denom1Res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(QArray<Qubit>.Add(a1Q, pad)));
#line 115 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            var denom2Res = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(a2Q));
#line 117 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            return new QArray<Int64>(nRes, dRes, denom1Res, denom2Res);
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(pad1);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(pad);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(auxMult);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(auxDiv);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(a2Q);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(a1Q);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(dQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(nQ);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__BigIntAsBoolArray = this.__Factory__.Get<ICallable<System.Numerics.BigInteger, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.BigIntAsBoolArray));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.CFStep__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)>>(typeof(CFStep));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__((System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, System.Numerics.BigInteger n, System.Numerics.BigInteger d, System.Numerics.BigInteger approxDenom1, System.Numerics.BigInteger approxDenom2, Int64 convergenceIndex, Int64 size)
        {
            return __m__.Run<testCFStep, (System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,Int64,Int64), IQArray<Int64>>((n, d, approxDenom1, approxDenom2, convergenceIndex, size));
        }
    }

    [SourceLocation("C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs", OperationFunctor.Body, 125, -1)]
    public partial class testCFSQubitCount : Operation<Int64, QVoid>, ICallable
    {
        public testCFSQubitCount(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "testCFSQubitCount";
        String ICallable.FullName => "ContinuedFractionStep.Testing.testCFSQubitCount";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)> CFStep__
        {
            get;
            set;
        }

        public override Func<Int64, QVoid> __Body__ => (__in__) =>
        {
            var registerSize = __in__;
#line hidden
            {
#line 126 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                var aQ = Allocate__.Apply(((2L * registerSize) + 1L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 127 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                        var bQ = Allocate__.Apply(((2L * registerSize) + 1L));
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 128 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                var aD1 = Allocate__.Apply(registerSize);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line hidden
                                    {
#line 129 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                        var aD2 = Allocate__.Apply(registerSize);
#line hidden
                                        bool __arg4__ = true;
                                        try
                                        {
#line hidden
                                            {
#line 130 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                var auD = Allocate__.Apply(registerSize);
#line hidden
                                                bool __arg5__ = true;
                                                try
                                                {
#line hidden
                                                    {
#line 131 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                        var auM = Allocate__.Apply(registerSize);
#line hidden
                                                        bool __arg6__ = true;
                                                        try
                                                        {
#line hidden
                                                            {
#line 132 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                var pad = Allocate__.Apply(registerSize);
#line hidden
                                                                bool __arg7__ = true;
                                                                try
                                                                {
#line hidden
                                                                    {
#line 133 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                        var pad1 = Allocate__.Apply((registerSize + 1L));
#line hidden
                                                                        bool __arg8__ = true;
                                                                        try
                                                                        {
#line 135 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, aQ));
#line 136 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, bQ));
#line 137 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, aD1));
#line 138 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, aD2));
#line 140 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            CFStep__.Apply((aQ, bQ, aD1, aD2, auD, auM, pad, pad1, 3L));
#line 141 "C:\\Users\\andre\\OneDrive - University of Bath\\Anu3\\QuantumDissertationCode\\MyCode\\ContinuedFractionStep\\Program.qs"
                                                                            CFStep__.Adjoint.Apply((aQ, bQ, aD1, aD2, auD, auM, pad, pad1, 3L));
                                                                        }
#line hidden
                                                                        catch
                                                                        {
                                                                            __arg8__ = false;
                                                                            throw;
                                                                        }
#line hidden
                                                                        finally
                                                                        {
                                                                            if (__arg8__)
                                                                            {
#line hidden
                                                                                Release__.Apply(pad1);
                                                                            }
                                                                        }
                                                                    }
                                                                }
#line hidden
                                                                catch
                                                                {
                                                                    __arg7__ = false;
                                                                    throw;
                                                                }
#line hidden
                                                                finally
                                                                {
                                                                    if (__arg7__)
                                                                    {
#line hidden
                                                                        Release__.Apply(pad);
                                                                    }
                                                                }
                                                            }
                                                        }
#line hidden
                                                        catch
                                                        {
                                                            __arg6__ = false;
                                                            throw;
                                                        }
#line hidden
                                                        finally
                                                        {
                                                            if (__arg6__)
                                                            {
#line hidden
                                                                Release__.Apply(auM);
                                                            }
                                                        }
                                                    }
                                                }
#line hidden
                                                catch
                                                {
                                                    __arg5__ = false;
                                                    throw;
                                                }
#line hidden
                                                finally
                                                {
                                                    if (__arg5__)
                                                    {
#line hidden
                                                        Release__.Apply(auD);
                                                    }
                                                }
                                            }
                                        }
#line hidden
                                        catch
                                        {
                                            __arg4__ = false;
                                            throw;
                                        }
#line hidden
                                        finally
                                        {
                                            if (__arg4__)
                                            {
#line hidden
                                                Release__.Apply(aD2);
                                            }
                                        }
                                    }
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(aD1);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQ);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(aQ);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.CFStep__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,IQArray<Qubit>,Int64)>>(typeof(CFStep));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 registerSize)
        {
            return __m__.Run<testCFSQubitCount, Int64, QVoid>(registerSize);
        }
    }
}